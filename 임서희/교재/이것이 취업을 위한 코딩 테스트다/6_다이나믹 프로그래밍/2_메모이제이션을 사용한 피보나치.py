# 메모이제이션(Memoization): 다이나믹 프로그래밍 구현 방법 중 하나로, 
# 한 번 구한 결과를 메모리 공간에 메모해두고 다시 호출되면 그 결과를 그대로 가져온다.
# 실제로 메모이제이션은, 한 번 구한 정보를 리스트에 저장하여 구현한다.

# 다이나믹 프로그래밍 조건
# 1. 큰 문제를 작은 문제로 나눌 수 있다.
# 2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

# 메모이제이션과 다이나믹 프로그래밍을 혼용해서 사용하기도 하는데 이는 별도의 개념으로 구분해야 한다.
# 메모이제이션은 단순히 결과를 저장해놓는다는 의미로, 다이나믹 프로그래밍에 활용되지 않을 수도 있기 때문이다.

# 이때 메모이제이션은 탑다운 방식에 국한되어 사용하는 방식이다.
# 탑다운 방식이란, 재귀 함수를 이용하여 큰 문제를 해결하기 위해 작은 문제를 호출하는 것을 의미한다.

# 큰 문제를 해결하기 위해 작은 문제를 호출하는 '탑다운 방식' : 재귀 함수 이용
d = [0] * 100 # 메모이제이션 리스트 초기화

def fivo(x):
    if x == 1 or x == 2:
        return 1
    if d[x] != 0: # 이미 계산한 문제라면 그대로 반환
        return d[x]
    d[x] = fivo(x-1) + fivo(x-2) # 아직 계산하지 않은 경우 점화식에 따라서 피보나치 결과 반환
    return d[x]

print(fivo(99)) # 99번째여도 빠르게 정답 도출