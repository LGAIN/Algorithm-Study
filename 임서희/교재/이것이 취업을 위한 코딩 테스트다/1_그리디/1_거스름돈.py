# 그리디(Greedy) 알고리즘 = 탐욕법
# '현재 상황에서 지금 당장 좋은 것만 선택하는 방법'을 그리디 알고리즘이라고 한다
# 현재 선택이 나중에 미칠 영향에 대해서는 고려하지 않고, 매 순간 가장 좋아보이는 것을 선택

# 그리디 알고리즘은 '기준에 따라 좋은 것을 선택'하는 알고리즘으로 문제에서 '가장 큰 순서대로', '가장 작은 순서대로'와 같은 기준을 알게 모르게 제시해준다
# 대체로 이 기준은 정렬 알고리즘을 사용했을 때 만족시킬 수 있어서 자주 정렬 알고리즘과 짝을 이뤄서 출제 된다.


# 거스름돈 문제
# '가장 큰 화폐 단위부터' 돈을 거슬러주기

n = int(input()) # n = 1260원이라고 가정
count = 0

# 큰 단위의 화폐부터 차례대로 확인
coin_types = [500, 100, 50, 10]

for coin in coin_types: # 화폐의 종류만큼 반복을 수행
    count += n // coin # 해당 화폐로 거슬러 줄 수 있는 동전 개수
    n %= coin

print(count)

# 화폐의 종류만큼 반복을 수행 → 화폐 종류가 K개면 시간 복잡도 O(K)
# 즉, 시간 복잡도에서 거슬러 주어야 하는 금액 n은 무관한 것을 알 수 있다.
# 다시 말해 시간 복잡도는 돈의 총 종류(K)에만 영향을 받는다.


# 그리디 알고리즘을 모든 알고리즘 문제에 적용할 수 있는 것은 아니다.
# 하지만 거스름돈 문제와 같이('가장 큰 화폐 단위부터') 탐욕적으로 문제에 접근했을 때 정확한 답을 찾을 수 있다는 보장이 있을 때 효과적이고 직관적이다.
# 그리디 알고리즘으로 해법을 찾으면 그 문제의 '해법이 정당한지 검토'해야 한다.

